#include <bits/stdc++.h>
#define int long long
using namespace std;

struct Process {
    int id;
    int arrival;
    int burst;
    int remaining;
    int completion;
    int turnaround;
    int waiting;
};

void fcfs(vector<Process> processes) {
    int n = processes.size();
    int currentTime = 0;
    int totalTAT = 0;
    int totalWT = 0;
    int idleTime = 0;

    cout << "\nGantt Chart (FCFS):\n";
    
    sort(processes.begin(), processes.end(),
        [](const Process& a, const Process& b) {
            return a.arrival < b.arrival;
        });

    // Handle initial idle time
    if (processes[0].arrival > 0) {
        cout << "| Idle (" << 0 << "-" << processes[0].arrival << ") ";
        idleTime += processes[0].arrival;
        currentTime = processes[0].arrival;
    }

    // Process execution
    for (int i = 0; i < n; i++) {
        if (currentTime < processes[i].arrival) {
            idleTime += processes[i].arrival - currentTime;
            cout << "| Idle (" << currentTime << "-" << processes[i].arrival << ") ";
            currentTime = processes[i].arrival;
        }

        cout << "| P" << processes[i].id << " (" << currentTime << "-"
             << currentTime + processes[i].burst << ") ";

        processes[i].completion = currentTime + processes[i].burst;
        currentTime = processes[i].completion;

        processes[i].turnaround = processes[i].completion - processes[i].arrival;
        processes[i].waiting = processes[i].turnaround - processes[i].burst;

        totalTAT += processes[i].turnaround;
        totalWT += processes[i].waiting;
    }

    // Calculate CPU utilization
    float cpuUtilization = ((float)(currentTime - idleTime) / currentTime) * 100;

    // Output results
    cout << "\n\nProcess\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n";
    cout << "---------------------------------------------------------------\n";

    for (auto p : processes) {
        cout << p.id << "\t" << p.arrival << "\t" << p.burst << "\t"
             << p.completion << "\t\t" << p.turnaround << "\t\t"
             << p.waiting << "\n";
    }

    cout << fixed << setprecision(2);
    cout << "\nAverage Turnaround Time: " << (float)totalTAT / n;
    cout << "\nAverage Waiting Time: " << (float)totalWT / n;
    cout << "\nCPU Utilization: " << cpuUtilization << "%\n";
}

void srtf(vector<Process> processes) {
    int n = processes.size();
    int currentTime = 0;
    int completed = 0;
    int idleTime = 0;
    int totalTAT = 0, totalWT = 0;

    cout << "\nGantt Chart (SrtF):\n";

    while (completed < n) {
        int shortest = -1;
        int minRemaining = INT_MAX;
        int nextArrival = INT_MAX;

        // Find process with shortest remaining time and next arrival
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival <= currentTime && processes[i].remaining > 0) {
                if (processes[i].remaining < minRemaining ||
                    (processes[i].remaining == minRemaining && processes[i].arrival < processes[shortest].arrival)) {
                    minRemaining = processes[i].remaining;
                    shortest = i;
                }
            }
            if (processes[i].arrival > currentTime && processes[i].arrival < nextArrival) {
                nextArrival = processes[i].arrival;
            }
        }

        if (shortest == -1) {
            cout << "| Idle (" << currentTime << "-" << nextArrival << ") ";
            idleTime += nextArrival - currentTime;
            currentTime = nextArrival;
            continue;
        }

        // Execute process until completion or preemption
        int startTime = currentTime;
        bool preempted = false;

        while (processes[shortest].remaining > 0) {
            currentTime++;
            processes[shortest].remaining--;

            // Check for preemption
            for (int i = 0; i < n; i++) {
                if (i != shortest && processes[i].arrival <= currentTime &&
                    processes[i].remaining > 0 &&
                    processes[i].remaining < processes[shortest].remaining) {
                    preempted = true;
                    break;
                }
            }
            if (preempted) break;
        }

        cout << "| P" << processes[shortest].id << " (" << startTime << "-" << currentTime << ") ";

        if (processes[shortest].remaining == 0) {
            completed++;
            processes[shortest].completion = currentTime;
            processes[shortest].turnaround = currentTime - processes[shortest].arrival;
            processes[shortest].waiting = processes[shortest].turnaround - processes[shortest].burst;
            totalTAT += processes[shortest].turnaround;
            totalWT += processes[shortest].waiting;
        }
    }

    float cpuUtilization = ((float)(currentTime - idleTime) / currentTime) * 100;

    cout << "\n\nProcess\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n";
    cout << "---------------------------------------------------------------\n";

    for (auto p : processes) {
        cout << p.id << "\t" << p.arrival << "\t" << p.burst << "\t"
             << p.completion << "\t\t" << p.turnaround << "\t\t"
             << p.waiting << "\n";
    }

    cout << fixed << setprecision(2);
    cout << "\nAverage Turnaround Time: " << (float)totalTAT / n;
    cout << "\nAverage Waiting Time: " << (float)totalWT / n;
    cout << "\nCPU Utilization: " << cpuUtilization << "%\n";
}

void rr(vector<Process> processes, int quantum) {
    int n = processes.size();
    queue<int> readyQueue;
    int currentTime = 0;
    int completed = 0;
    int idleTime = 0;
    vector<bool> inQueue(n, false);
    int totalTAT = 0, totalWT = 0;

    cout << "\nGantt Chart (RR):\n";
    
    sort(processes.begin(), processes.end(),
        [](const Process& a, const Process& b) {
            return a.arrival < b.arrival;
        });

    while (completed < n) {
        // Check for newly arrived processes
        int nextArrival = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining > 0 &&
                processes[i].arrival <= currentTime &&
                !inQueue[i]) {
                readyQueue.push(i);
                inQueue[i] = true;
            }
            if (processes[i].arrival > currentTime) {
                nextArrival = processes[i].arrival;
                break;
            }
        }

        if (readyQueue.empty()) {
            cout << "| Idle (" << currentTime << "-" << nextArrival << ") ";
            idleTime += nextArrival - currentTime;
            currentTime = nextArrival;
            continue;
        }

        int current = readyQueue.front();
        readyQueue.pop();
        inQueue[current] = false;

        int executeTime = min(quantum, processes[current].remaining);
        cout << "| P" << processes[current].id << " ("
             << currentTime << "-" << currentTime + executeTime << ") ";

        processes[current].remaining -= executeTime;
        currentTime += executeTime;

        if(processes[current].remaining > 0) {
            // Check for new arrivals before re-adding current process
            for(int i = 0; i < n; i++) {
                if(processes[i].remaining > 0 && 
                   processes[i].arrival <= currentTime && 
                   !inQueue[i] && i != current) {
                    readyQueue.push(i);
                    inQueue[i] = true;
                }
            }
            readyQueue.push(current);
            inQueue[current] = true;
        } else {
            completed++;
            processes[current].completion = currentTime;
            processes[current].turnaround = processes[current].completion - 
                                          processes[current].arrival;
            processes[current].waiting = processes[current].turnaround - 
                                       processes[current].burst;
            totalTAT += processes[current].turnaround;
            totalWT += processes[current].waiting;
        }
    }

    float cpuUtilization = ((float)(currentTime - idleTime) / currentTime) * 100;

    cout << "\n\nProcess\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n";
    cout << "---------------------------------------------------------------\n";

    for (auto p : processes) {
        cout << p.id << "\t" << p.arrival << "\t" << p.burst << "\t"
             << p.completion << "\t\t" << p.turnaround << "\t\t"
             << p.waiting << "\n";
    }

    cout << fixed << setprecision(2);
    cout << "\nAverage Turnaround Time: " << (float)totalTAT / n;
    cout << "\nAverage Waiting Time: " << (float)totalWT / n;
    cout << "\nCPU Utilization: " << cpuUtilization << "%\n";
}

int32_t main() {
    string filename;
    cout << "Enter input file name: ";
    cin >> filename;

    ifstream inputFile(filename);
    if (!inputFile.is_open()) {
        cerr << "Error opening file!\n";
        return 0;
    }

    int n, quantum;
    inputFile >> n;
    vector<Process> processes(n);

    for (int i = 0; i < n; i++) {
        inputFile >> processes[i].arrival >> processes[i].burst;
        processes[i].id = i + 1;
        processes[i].remaining = processes[i].burst;
    }

    inputFile >> quantum;

    inputFile.close();

    
    fcfs(processes);
    srtf(processes);
    rr(processes, quantum);

    return 0;
}
